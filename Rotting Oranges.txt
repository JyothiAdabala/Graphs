			Rotting Oranges

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Example :

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Solution :

class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> q = new LinkedList<>();
        int time=0, fresh = 0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2)
                    q.add(new int[]{i,j});  // add all rotten oranges indices pairs in queue 
                else if(grid[i][j] == 1)
                    fresh++;        // count fresh oranges
            }
        }
        if(fresh==0)
            return 0;
        int d[][] = {{1,0}, {0,1}, {-1,0}, {0,-1},};        // defined four directions
        while(!q.isEmpty() && fresh>0){
            time++;
            int s;
            for(s = q.size();s>0;s--){
                int[] p = q.poll();
                for(int[] dt : d){
                    int x = p[0] + dt[0];
                    int y = p[1] + dt[1];
                    if(x<0 || y<0 || x>=grid.length || y>=grid[0].length || grid[x][y] == 2 || grid[x][y] == 0)
                        continue;
                    q.add(new int[]{x,y});  //add fresh ranges indices pairs in queue
                    grid[x][y] = 2;     // marking as rottened
                    fresh--;
                }
            }
        }
        if(fresh==0)
            return time;
        else
            return -1;
    }
}

